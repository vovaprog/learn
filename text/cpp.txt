
The format attribute specifies that a function takes printf, scanf, strftime or strfmon style 
arguments which should be type-checked against a format string:  

format (archetype, string-index, first-to-check) 
archetype determines how the format string is interpreted, and should be printf, scanf, strftime or strfmon.
The parameter string-index specifies which argument is the format string argument (starting from 1)
first-to-check is the number of the first argument to check against the format string

extern int my_printf (void *my_object, const char *my_format, ...) __attribute__ ((format (printf, 2, 3)));

====================================================================================================

cmake set c and c++ compiler:
SET(CMAKE_C_COMPILER /path/to/c/compiler)
SET(CMAKE_CXX_COMPILER /path/to/cpp/compiler)

Или из командной строки:
export CC=clang-3.6
export CXX=clang++-3.6

====================================================================================================

Чтобы cmake собирал с -O0 нужно еще в начале написать:
set(CMAKE_BUILD_TYPE Debug)

====================================================================================================

qtcreator qt creator search project - Ctrl + Shift + f
Alt + 0    -   hide side bar
Ctrl + mouse click symbol - go to declaration
Ctrl + Shift + V  - clipboard history
Ctrl + /   - comment with line comments
Ctrl + Space - autocomplete

====================================================================================================

std::this_thread::sleep_for(std::chrono::nanoseconds(1));
std::this_thread::yield();

====================================================================================================

set thread name:

pthread_setname_np(pthread_self(), threadName.c_str());


set thread affinity:

cpu_set_t cpuset;

CPU_ZERO(&cpuset);
CPU_SET(cpu, &cpuset);

pthread_setaffinity_np(pthread_self(), sizeof(cpu_set_t), &cpuset);

====================================================================================================

sleep for milliseconds:

std::this_thread::sleep_for(std::chrono::milliseconds(50));

====================================================================================================


