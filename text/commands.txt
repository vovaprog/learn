debian - установка обновлений:
apt-get dist-upgrade

Освобождение места, которое занимают загруженные apt файлы:
apt-get clean

//======================================================================

Установка пакетов не учитывая ошибки зависимостей:
sudo dpkg -i --force-all ./*.deb

//======================================================================

LXDE - создание значка с именем wd на рабочем столе:
lxshortcut -o ~/Рабочий\ стол/wd

//======================================================================

Установка даты и времени:
sudo date -s "2 OCT 2006 18:00:00"

//======================================================================
Midnight Commander:

Вызов диалога поиска:
Esc + Shift + 7 (в русском языке)
Esc + Shift + ? (в англ)

//======================================================================

set user password: login as root:
passwd some_username

//======================================================================

rsync --dry-run -r --progress -v --delete --owner --group --chown=username:group --chmod=Dug=rx,Fug=r ./local_folder/ "username@address:remote_folder_name"
--dry-run    - just print commands
/ slash at local folder name end is important.

my use of rsync:
rsync -c -r --progress -v --delete --owner --group --chown=user:group --chmod=Dug=rx,Fug=r ./folder_name/ "user@address:/remote/folder/name"

//======================================================================
astyle:
http://astyle.sourceforge.net/astyle.html

Work style:
./astyle --attach-namespaces --pad-header --indent=spaces=4 --style=kr ./LinkFastMd.cpp
./astyle --attach-namespaces --pad-header --indent=tab --style=kr ./LinkFastMd.cpp

Home style:
./astyle --attach-namespaces --indent=spaces=4 --pad-header --pad-oper --style=allman ./609d.cpp


alias astyle_allman_spaces='~/tools/astyle --attach-namespaces --indent=spaces=4 --pad-header --pad-oper --style=allman --suffix=none'

Не сохранять .orig файлы:
--suffix=none

//======================================================================

set configuration when running cmake:
Debug, Release, RelWithDebInfo, MinSizeRel.

cmake -DCMAKE_BUILD_TYPE=Release ..
cmake -DCMAKE_BUILD_TYPE=RelWithDebInfo ..
cmake -DCMAKE_BUILD_TYPE=Debug ..
cmake -DCMAKE_BUILD_TYPE=MinSizeRel ..


to print cmake commands run:
make VERBOSE=1

set clang compiler:
cmake -DCMAKE_C_COMPILER=clang-3.6 -DCMAKE_CXX_COMPILER=clang++-3.6 ../src

set c++ flags:
cmake -DCMAKE_BUILD_TYPE=RelWithDebInfo -DCMAKE_CXX_FLAGS="-fno-omit-frame-pointer" ../src

generate project for eclipse:
cmake -G "Eclipse CDT4 - Unix Makefiles" .

get list of cmake generators:
man cmake-generators

install to specified folder:
make DESTDIR=/home/john install

//======================================================================

Форматирование питона:
autopep8 -i -v ./test_link_fastmd.py

alias autopep='autopep8 -i -v'

//======================================================================

Форматирование LLVM:
clang-format-3.6 --style="{BasedOnStyle: mozilla, IndentWidth: 4, BreakBeforeBraces: Allman, ColumnLimit: 100, AccessModifierOffset: -4}" ./link.h

alias clangf='clang-format-3.6 -i --style="{BasedOnStyle: mozilla, IndentWidth: 4, BreakBeforeBraces: Allman, ColumnLimit: 100, AccessModifierOffset: -4}"'

//======================================================================

Загрузить so lib-ы из текущей папки:
/lib64/ld-linux-x86-64.so.2 --library-path . ./program_name

/lib64/ld-linux-x86-64.so.2 - загрузчик linux

Показать какие so файлы и откуда будут загружены:
/lib64/ld-linux-x86-64.so.2 --list ./program_name

//======================================================================

//======================================================================

run nose tests:
/usr/bin/nosetests "python/test.py" "-v" "--with-xunit"

run specific nose test:
cd /home/user/project/python
/bin/sh "-c" "LD_LIBRARY_PATH=/home/user/project/build/lib: nosetests -v test/test.py:test_name"

//======================================================================

chroot

Добавить в 
/etc/schroot/schroot.conf

[ubuntu1404]
description=ubuntu1404
directory=/home/username/chroot/ubuntu1404
users=username
preserve-environment=true

Потом
schroot -c ubuntu1404

list all schroots: 
schroot -l


debootstrap --variant=buildd --arch amd64 trusty ./ubuntu1404 http://archive.ubuntu.com/ubuntu

//======================================================================

Создание новой home папки пользователя:

mkhomedir_helper username

//======================================================================

Создание пользователя:
addgroup vova
useradd -g vova vova
passwd vova
mkhomedir_helper vova


useradd -m -g vova vova
-m - create home dir
-g - add to group vova

//======================================================================

btrfs:

truncate -s 20G ./fs.img
 1998  losetup --find
 1999  ls
 2000  losetup /dev/loop0 ./fs.img 
 2001  mkfs.btrfs -L snapfs /dev/loop0
 2003  mount /dev/loop0 .
 2004  pwd
 2005  btrfs subvolume create /var/chroot/ubuntu1404/root
 2006  btrfs subvolume create /var/chroot/ubuntu1404/snapshots
 2007  btrfs subvolume delete /var/chroot/ubuntu1404/root
 2008  btrfs subvolume create /var/chroot/ubuntu1404/roots
 2009  btrfs subvolume create /var/chroot/ubuntu1404/roots/ubuntu1404
 2011  debootstrap --variant=buildd --arch amd64 trusty ./ubuntu1404 http://archive.ubuntu.com/ubuntu
 2012  btrfs subvolume list .
 btrfs subvolume snapshot ./roots/ubuntu1404_configured/ ./snapshots/buildN

delete snapshot:
btrfs subvolume delete ./snapshots/build1

Workflow:
mount_chroot_fs.sh
(
losetup /dev/loop0 ./fs.img
mount /dev/loop0 /var/chroot/ubuntu1404
)
btrfs subvolume list .
btrfs subvolume snapshot ./roots/ubuntu1404_configured/ ./snapshots/buildN
chroot /var/chroot/ubuntu1404/snapshots/buildN
btrfs subvolume delete ./snapshots/buildN
umount_chroot_fs.sh
(
umount /var/chroot/ubuntu1404
losetup -d /dev/loop0
)

//======================================================================

//======================================================================

Чтобы появилось меню в QtCreator в Ubuntu1404:
sudo apt-get remove appmenu-qt5

//======================================================================

Google c++ static analysis:
./cpplint.py --filter=-whitespace,-legal ./linkfastmd.cpp

LLVM:
scan-build clang++ -c ./file_name.cpp
scan-build make -j 6 VERBOSE=1

//======================================================================

Добавление папки для поиска .so файлов:

Создать файл, в котором указать папку для поиска .so
/etc/ld.so.conf.d/my.conf

Выполнить:
sudo ldconfig



Debug .so started from Python script in QtCreator: 

Executable:
/lib/x86_64-linux-gnu/ld-2.19.so

Arguments:
--library-path . /usr/bin/python /home/user/some_script.py



Функции из so резолвятся только при первом обращении.
Чтобы сразу зарезолвить все функции (полезно для debugger-a) нужно определить в environment
LD_BIND_NOW=y
(y - любая не пустая строка)

man ld.so

ldd(1), ldconfig(8) /etc/ld.so.conf


list all shared libs dependencies and how they are resolved:
/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2 --list ./some_program

readelf   -  info about elf file
ldd - print shared library dependencies

get info from exception handler section:
readelf -wF app > ./eh.txt


//======================================================================

gnome remove icon from launch panel
Alt + Win + RightClick    on icon.

create desktop icon shortcut:
gnome-desktop-item-edit --create-new ~/Рабочий\ стол/

gnome dark theme.
в меню: системные утилиты / настройки / дополнительные параметры
or run in console:
gnome-tweak-tool
Внешний вид -> применить темную тему.

нужно установить пакет с темой adwaita

//======================================================================

Run qt creator dark:
/home/user/tools/qtcreator-4.0.3/bin/qtcreator -stylesheet=/home/user/tools/qt_creator_dark/darcula/darcula.css
Select Dark Theme.
Darcula, Wombat
Выбор подсветки - Инструменты, Параметры, Текстовый редактор, Цветовая Схема.

//======================================================================

Install Oracle Java jre:

update-alternatives --install /usr/bin/java java /usr/lib/jvm/java-8/bin/java 2000
update-alternatives --config java

List of alternatives:
sudo update-alternatives --list java

Remove invalid:
sudo update-alternatives --remove java /usr/lib/jvm/java-8

//======================================================================

To save core dump (can be run as user(non root) ):
ulimit -c unlimited


Куда пишется файл core записано в файле:
/proc/sys/kernel/core_pattern

Например:
/opt/coredumps/core.%e.%p.%t
|/usr/share/apport/apport %p %s %c %P


gdb core dump:

gdb <executable> <core-file> 
or 
gdb <executable> -c <core-file> 
or
gdb <executable>
...
(gdb) core <core-file>


start program with arguments:
gdb --args ./program arg1 arg2 arg3

break on first throw:
gdb$ catch throw

//======================================================================

set compilers for cmake: 
2072  export CCC_ANALYZER_CPLUSPLUS=1
2073  export CC=clang-3.6
2074  export CXX=clang++-3.6

cmake -DCMAKE_C_COMPILER=/usr/bin/gcc -DCMAKE_CXX_COMPILER=/usr/bin/g++ ..
cmake -DCMAKE_C_COMPILER=clang-3.6 -DCMAKE_CXX_COMPILER=clang++-3.6 ../src

//======================================================================

grep search:
grep -in "some word" ./restoretimelink.cc
grep -in "return" ./*.cc ./*.h

find . -name "*link*"

find . -type f -iname "*.cc" -o -iname "*.cpp" -o -iname "*.c" -o -iname "*.h" -o -iname "*.hh"  | xargs grep -in --color=auto "link"

findcode() {
    if [ -z "$1" ]
    then
        echo "USAGE: findcode search_pattern show_lines"
    fi
    if [ -z "$2" ]
    then
        find . -type f -iname "*.c" -o -iname "*.cc" -o -iname "*.cpp" -o -iname "*.h" -o -iname "*.hh" -o -iname "*.hpp" \
                    -o -iname "*.py" -o -iname "*.pl" -o -iname "Makefile" -o -iname "*.CMakeLists.txt" -o -iname "*.sh" | xargs grep -in --color=auto $1        
    else
        find . -type f -iname "*.c" -o -iname "*.cc" -o -iname "*.cpp" -o -iname "*.h" -o -iname "*.hh" -o -iname "*.hpp" \
                    -o -iname "*.py" -o -iname "*.pl" -o -iname "Makefile" -o -iname "*.CMakeLists.txt" -o -iname "*.sh" | xargs grep -in --color=auto -C $2 $1                    
    fi
}

findc() {
    if [ -z "$1" ]
    then
        echo "USAGE: findc search_pattern show_lines"
    fi
    if [ -z "$2" ]
    then
      find . -type f -iname "*.c" -o -iname "*.cc" -o -iname "*.cpp" -o -iname "*.h" -o -iname "*.hh" -o -iname "*.hpp"  | xargs grep -in --color=auto $1
    else
      find . -type f -iname "*.c" -o -iname "*.cc" -o -iname "*.cpp" -o -iname "*.h" -o -iname "*.hh" -o -iname "*.hpp"  | xargs grep -in --color=auto -C $2 $1
    fi    
}


#--include - case sensative
grep -rin --include "*.c" --include "*.cc" --include "*.cpp" --include "*.h" --include "*.hh" --include "*.hpp" $1
grep -rin --include "*.c" --include "*.cc" --include "*.cpp" --include "*.h" --include "*.hh" --include "*.hpp" \
          --include "*.py" --include "*.pl" --include "Makefile" --include "CMakeLists.txt" $1

grep -rin "some_text"
-r - recursive
-i - case insencetive
-n - with line numbers

search only in headers and cpp files:
> grep -rin --include *.h --include *.cpp "some_text"

search in cpp and CPP:
> grep -rin --include=*.{cpp,CPP} "hello"

search with ignore case and ignore case of file name:
> find . -iname "*.cpp" | xargs grep -in --color=auto "hello"

-w - search whole words:
> grep -w search_pattern file_name

output 2 lines of context:
> grep --rin -C 2 test

search for word, not regex pattern:
> grep -F "word" file_name

ack - grep-like text finder for programmers

//======================================================================
Locate:

locate file_name

Update locate database:
sudo updatedb

Database:
/var/lib/mlocate/mlocate.db
Config:
/etc/updatedb.conf

//======================================================================

sfte
nefte

//======================================================================

qt creator qtcreator
Go to goto defintion: F2 key

//======================================================================

Remove spaces at end of lines:
sed -i "s/[[:blank:]]*$//" file_name

//======================================================================

set default editor mcedit:
sudo update-alternatives --config editor

//======================================================================

Gnome terminal with 256 colors:
export TERM="xterm-256color"

//======================================================================
ctags
generate tags for mcedit:
ctags -e -R

use tags in mcedit:
cursor at end of word, Alt+Enter

human readable tags:
ctags -R -x > ./out.txt

list all classes:
ctags -R -x --languages=C++ --C++-kinds=c

//======================================================================

grep stderr:

./some_command   2>&1 >/dev/null | grep 'ERROR'

or this (works only in bash):
./some_command |& grep 'ERROR'

//======================================================================

use callgrind: 
valgrind --tool=callgrind ./program_name --prog-args

get text output:
callgrind_annotate ./callgrind.out.1515

output also callers and called functions:
callgrind_annotate --tree=both ./callgrind.out.1515

Only profile selected function and functions called from it:
valgrind --tool=callgrind "--toggle-collect=ClassName::FunctionName*" ./program_name arg1 arg2

--toggle-collect can be given multiple times to specify different functions of interest.

//======================================================================

format flash ntfs
sudo mkfs.ntfs --fast -L label /dev/sdf1

create partition:
fdisk /dev/sdf
p - print partitions
n - create partition
d - delete partition
w - write changes to disk

format disk to ext4:
sudo mkfs.ext4 -L label /dev/sde1

print available disks:
fdisk -l

//======================================================================

get motherboard info (non root):

cat /sys/devices/virtual/dmi/id/board_{vendor,name,version}

//======================================================================

ps

show running threads:
ps -eL -o user,pid,psr,comm,args
htop

show process uptime:
> ps -eo pid,comm,lstart,etime,time | grep 'epoll'
lstart - time of process start
etime  - uptime
time   - processor time

//======================================================================

htop
space - select process
l - show opened files of process

//======================================================================

restart network:

/etc/init.d/networking restart

ubuntu:
ifup eth0
ifdown eth0

//======================================================================
set eth0 use dhcp:

file:
/etc/network/interfaces

allow-hotplug eth0
iface eth0 inet dhcp


set eth0 static ip:

auto eth0
iface eth0 inet static
    address 192.168.1.148
    netmask 255.255.255.0
    gateway 192.168.1.1    
    
//======================================================================

install docker ubuntu 14.04
apt-key adv --keyserver hkp://p80.pool.sks-keyservers.net:80 --recv-keys 58118E89F3A912897C070ADBF76221572C52609D

to file /etc/apt/sources.list.d/docker.list write:
deb https://apt.dockerproject.org/repo ubuntu-trusty main

apt-get install linux-image-extra-$(uname -r) linux-image-extra-virtual

apt-get update

apt-get install docker-engine

groupadd docker
usermod -aG docker $USER
newgrp docker

to file /etc/default/docker add (not required, only when dns does not work):
DOCKER_OPTS="--dns 172.17.32.3 --bip=192.168.1.5/24"

service docker start

docker run hello-world

-------

move image to another host:
docker save -o <save image to path> <image name>

copy to another computer, then:

docker load -i <path to image tar file>

git for docker:
https://ryanfb.github.io/etc/2015/07/29/git_strategies_for_docker.html

volumes:
http://container42.com/2013/12/16/persistent-volumes-with-docker-container-as-volume-pattern/
https://docs.docker.com/engine/tutorials/dockervolumes/

//======================================================================

perf:
perf record -F 99 -g ./some_program
perf report


//======================================================================

run test whose name matches regex:
ctest -V -R ".*test-name.*"

//======================================================================

convert to base 64
echo -n "admin:123" | base64
from base 64
echo "YWRtaW46MTIz" | base64 --decode

//======================================================================

uwsgi
uwsgi --http-socket 127.0.0.1:7070 --wsgi-file ./gallery.wsgi
sudo pip install uwsgi

//======================================================================

https://linux.die.net/man/7/capabilities

let program bind listen to port below 1024:

sudo setcap 'cap_net_bind_service+ep' /path/to/program

//======================================================================

Apache benchmark:

 ab -n 10000 -c 250  "http://127.0.0.1:7000/test2.jpg"

//======================================================================

run in background:

nohup ./http_server > /dev/null 2> /dev/null &

//======================================================================

generate openssl certificate:

openssl req -x509 -newkey rsa:4096 -keyout server.pem -out server.pem -days 20000 -nodes
openssl req -new -x509 -keyout server.pem -out server.pem -days 20000 -nodes

-nodes       - do not encrypt key
-keyout -out - могут быть разные файлы, может быть один файл

//======================================================================

find stop kill process by name:

kill -SIGINT $(ps -e | grep 'epoll_http_server' | awk '{ print $1 }')

//======================================================================

run process in background:

cd ./epoll_http_server && nohup ./epoll_http_server > /dev/null 2> /dev/null &

//======================================================================

list of process open files:

ls -l /proc/3510/fd

//======================================================================

profile epoll http server:

===== valgrind =====


valgrind --tool=memcheck --leak-check=full --show-leak-kinds=all ./epoll_http_server
ab -n 100 -c 20  "http://127.0.0.1:7000/test.jpg"

valgrind --tool=callgrind ./epoll_http_server
valgrind --tool=cachegrind ./epoll_http_server

valgrind --tool=massif ./epoll_http_server
ms_print ./massif.out.pid



===== perf ======

cmake -DCMAKE_BUILD_TYPE=RelWithDebInfo -DCMAKE_CXX_FLAGS="-fno-omit-frame-pointer" ../src

perf record -F 1000 -g ./epoll_http_server
(-F number - frequency of samples,   -g - record call graph)

perf report


//======================================================================
clang static analyzer:

# run cmake
#!/bin/sh

export CC="/usr/share/clang/scan-build-3.8/libexec/ccc-analyzer"
export CXX="/usr/share/clang/scan-build-3.8/libexec/c++-analyzer"
export CXXAnalyzer="/usr/share/clang/scan-build-3.8/libexec/c++-analyzer"

scan-build cmake ../src


# run make
#!/bin/sh

export CCC_CC="clang"
export CCC_CXX="clang++"

scan-build make

===================================================
 
export CCC_CC=clang
export CCC_CXX=clang++

cmake -DCMAKE_C_COMPILER=/usr/share/clang/scan-build-3.8/libexec/ccc-analyzer -DCMAKE_CXX_COMPILER=/usr/share/clang/scan-build-3.8/libexec/c++-analyzer ../src

===================================================

export CCC_CC=clang
export CCC_CXX=clang++

scan-build make
vlads@lubuntu1604:~/git/epoll_http_server/build2$ 

//======================================================================

man less

n - search next
Shift+n - search prev

//======================================================================

show open connections:

netstat
ss
lsof -i

//======================================================================

bash

clear screen:
Ctrl + l
or:
> clear

//======================================================================

linux Capabilities:
setcap
getcap

https://forums.grsecurity.net/viewtopic.php?f=7&t=2522&sid=c6fbcf62fd5d3472562540a7e608ce4e#p10271

//======================================================================

disassemble mixed with source:

objdump -DS --disassembler-options=intel  ./program  > ./disas.txt


create g++ mixed disassembly for cmake project:

cmake -DCMAKE_CXX_FLAGS="-Wa,-adhln -g -masm=intel" ../src
make > ./out.s

cmake -DCMAKE_CXX_FLAGS="-Wa,-adhln -masm=intel" -DCMAKE_BUILD_TYPE=RelWithDebInfo ../src
make > ./out.s

for one file:
without source:
g++ -S -masm=intel ./test.cpp

with source:
g++ -g -Wa,-adhln -masm=intel ./test.cpp > ./out.s

//======================================================================
build linux kernel:

получить версию текущего ядра
4.4.0-31-generic

взять файл
/boot/config-4.4.0-31-generic
копировать в папку
linux_kernel_source/.config

run (disables debug info in ubuntu config):
scripts/config --disable DEBUG_INFO

make olddefconfig

make -j 6 bindeb-pkg

(deb files will be in parent dir of source dir)
sudo dpkg -i ./linux-image-4.8.6_4.8.6-1_amd64.deb


grub - show menu at startup - hold Right Shift key while booting.

set grub default kernel:
/etc/default/grub
set parameter GRUB_DEFAULT to number of needed kernel in grub boot menu  
GRUB_DEFAULT=2
then run:
sudo update-grub


//======================================================================

generate ssh keys:

ssh-keygen -t ecdsa -f /etc/ssh/ssh_host_ecdsa_key
ssh-keygen -t ed25519 -f /etc/ssh/ssh_host_ed25519_key

-t    -    key type
-f    -    file name

key location: /etc/ssh


ssh X server:

export DISPLAY=:0
ssh -C -X -Y ip_address
-Y is not necessary (Enables trusted X11 forwarding.)

//======================================================================

systemd

#enable new service
systemctl enable epoll_http_server

#start / stop
systemctl start epoll_http_server
systemctl stop epoll_http_server

#reload configs (after editing unit file)
systemctl daemon-reload

#show service status (displays start errors)
systemctl status epoll_http_server

//======================================================================

ls show hidden files:
ls -al

//======================================================================

print current cpu model name:
cat /proc/cpuinfo | grep "name" | cut -d : -f2 | uniq

command cut - select field from line.
-d - delimiter ":"
-f2 - second field
    
//======================================================================

eclipse:
F3 - go to definition
F2 - open source of function in small window
Ctrl + Shift + g - find references
Ctrl + e  - switch to tab
Ctrl + F6 - switch to tab
Ctrl + PgUp, Ctrl + PgDown - switch tabs

key shortcuts:
window -> preferences -> general -> keys

get back to previous file: Alt + LeftArrow

//======================================================================

wireshark - enable capture for non-root users:
sudo dpkg-reconfigure wireshark-common

add user to wireshark group:
sudo adduser $USER wireshark

//======================================================================

find running hosts in network.
-sn - ping scan.

nmap -sn 192.168.1.0/24

//======================================================================

set default gateway:

ip route change default via 111.111.111.111 dev eth0


set static ip:

ip addr add 192.168.10.5/24 dev enp0s25

set mtu:
ip link set dev enp0s25 mtu 1400

get routes (gateways):

route -n 

//======================================================================

create 1 Gigabyte file with zeros:
dd if=/dev/zero of=./output bs=1M count=1024

//======================================================================

llvm clang static analyzer:

cmake -DCMAKE_CXX_COMPILER=/home/user/tools/llvm40/libexec/c++-analyzer ../src

/home/user/tools/llvm40/bin/scan-build make -j 4

/home/user/tools/llvm40/bin/scan-view /tmp/scan-build-2017-03-19-xxxx-yyyy-z

if there are no errors in program - report will not be generated.

may be also needed:
export PATH="/home/user/tools/llvm40/bin:$PATH" 


Если без cmake. Makefile:
all: main
	$(CXX) ./main.cpp -o main

/home/user/tools/llvm40/bin/scan-build make

scan-build переопределяет переменную $(CXX)

//======================================================================

run perl command for every line in input file:
perl -n -e "perl script" file_name

perl -n -e '/define\s+__NR_([a-zA-Z_]+)\s+([0-9]+)/ && print "syscallNames[$2] = \"$1\";\n"' \
/usr/include/x86_64-linux-gnu/asm/unistd_64.h > ./syscall_names.cpp

//======================================================================
