debian - установка обновлений:
apt-get dist-upgrade

Освобождение места, которое занимают загруженные apt файлы:
apt-get clean

//======================================================================

Установка пакетов не учитывая ошибки зависимостей:
sudo dpkg -i --force-all ./*.deb

//======================================================================

LXDE - создание значка с именем wd на рабочем столе:
lxshortcut -o ~/Рабочий\ стол/wd

//======================================================================

Установка даты и времени:
sudo date -s "2 OCT 2006 18:00:00"

//======================================================================
Midnight Commander:

Вызов диалога поиска:
Esc + Shift + 7 (в русском языке)
Esc + Shift + ? (в англ)

//======================================================================

set user password: login as root:
passwd some_username

//======================================================================

rsync --dry-run -r --progress -v --delete --owner --group --chown=username:group --chmod=Dug=rx,Fug=r ./local_folder/ "username@address:remote_folder_name"
--dry-run    - just print commands
/ slash at local folder name end is important.

//======================================================================
astyle:
http://astyle.sourceforge.net/astyle.html

Work style:
./astyle --attach-namespaces --pad-header --indent=spaces=4 --style=kr ./LinkFastMd.cpp
./astyle --attach-namespaces --pad-header --indent=tab --style=kr ./LinkFastMd.cpp

Home style:
./astyle --attach-namespaces --indent=spaces=4 --pad-header --pad-oper --style=allman ./609d.cpp


alias astyle_allman_spaces='~/tools/astyle --attach-namespaces --indent=spaces=4 --pad-header --pad-oper --style=allman --suffix=none'

Не сохранять .orig файлы:
--suffix=none

//======================================================================

Форматирование питона:
autopep8 -i -v ./test_link_fastmd.py

alias autopep='autopep8 -i -v'

//======================================================================

Форматирование LLVM:
clang-format-3.6 --style="{BasedOnStyle: mozilla, IndentWidth: 4, BreakBeforeBraces: Allman, ColumnLimit: 100, AccessModifierOffset: -4}" ./link.h

alias clangf='clang-format-3.6 -i --style="{BasedOnStyle: mozilla, IndentWidth: 4, BreakBeforeBraces: Allman, ColumnLimit: 100, AccessModifierOffset: -4}"'

//======================================================================

Загрузить so lib-ы из текущей папки:
/lib64/ld-linux-x86-64.so.2 --library-path . ./program_name

/lib64/ld-linux-x86-64.so.2 - загрузчик linux

Показать какие so файлы и откуда будут загружены:
/lib64/ld-linux-x86-64.so.2 --list ./program_name

//======================================================================

to print cmake commands run:
make VERBOSE=1

//======================================================================

run nose tests:
/usr/bin/nosetests "python/test.py" "-v" "--with-xunit"

run specific nose test:
cd /home/user/project/python
/bin/sh "-c" "LD_LIBRARY_PATH=/home/user/project/build/lib: nosetests -v test/test.py:test_name"

//======================================================================

chroot

Добавить в 
/etc/schroot/schroot.conf

[ubuntu1404]
description=ubuntu1404
directory=/home/username/chroot/ubuntu1404
users=username
preserve-environment=true

Потом
schroot -c ubuntu1404

list all schroots: 
schroot -l


debootstrap --variant=buildd --arch amd64 trusty ./ubuntu1404 http://archive.ubuntu.com/ubuntu

//======================================================================

Создание новой home папки пользователя:

mkhomedir_helper username

//======================================================================

btrfs:

truncate -s 20G ./fs.img
 1998  losetup --find
 1999  ls
 2000  losetup /dev/loop0 ./fs.img 
 2001  mkfs.btrfs -L snapfs /dev/loop0
 2003  mount /dev/loop0 .
 2004  pwd
 2005  btrfs subvolume create /var/chroot/ubuntu1404/root
 2006  btrfs subvolume create /var/chroot/ubuntu1404/snapshots
 2007  btrfs subvolume delete /var/chroot/ubuntu1404/root
 2008  btrfs subvolume create /var/chroot/ubuntu1404/roots
 2009  btrfs subvolume create /var/chroot/ubuntu1404/roots/ubuntu1404
 2011  debootstrap --variant=buildd --arch amd64 trusty ./ubuntu1404 http://archive.ubuntu.com/ubuntu
 2012  btrfs subvolume list .
 btrfs subvolume snapshot ./roots/ubuntu1404_configured/ ./snapshots/buildN

delete snapshot:
btrfs subvolume delete ./snapshots/build1

Workflow:
mount_chroot_fs.sh
(
losetup /dev/loop0 ./fs.img
mount /dev/loop0 /var/chroot/ubuntu1404
)
btrfs subvolume list .
btrfs subvolume snapshot ./roots/ubuntu1404_configured/ ./snapshots/buildN
chroot /var/chroot/ubuntu1404/snapshots/buildN
btrfs subvolume delete ./snapshots/buildN
umount_chroot_fs.sh
(
umount /var/chroot/ubuntu1404
losetup -d /dev/loop0
)

//======================================================================
Debug .so started from Python script in QtCreator: 

Executable:
/lib/x86_64-linux-gnu/ld-2.19.so

Arguments:
--library-path . /usr/bin/python /home/user/some_script.py

//======================================================================

Чтобы появилось меню в QtCreator в Ubuntu1404:
sudo apt-get remove appmenu-qt5

//======================================================================

Google c++ static analysis:
./cpplint.py --filter=-whitespace,-legal ./linkfastmd.cpp

LLVM:
scan-build clang++ -c ./file_name.cpp
scan-build make -j 6 VERBOSE=1

//======================================================================

Добавление папки для поиска .so файлов:

Создать файл, в котором указать папку для поиска .so
/etc/ld.so.conf.d/my.conf

Выполнить:
sudo ldconfig

//======================================================================

gnome remove icon from launch panel
Alt + Win + RightClick    on icon.

//======================================================================

Run qt creator dark:
/home/user/tools/qtcreator-4.0.3/bin/qtcreator -stylesheet=/home/user/tools/qt_creator_dark/darcula/darcula.css
Select Dark Theme.
Darcula, Wombat
Выбор подсветки - Инструменты, Параметры, Текстовый редактор, Цветовая Схема.

//======================================================================

Install Oracle Java jre:

update-alternatives --install /usr/bin/java java /usr/lib/jvm/java-8/bin/java 2000
update-alternatives --config java

List of alternatives:
sudo update-alternatives --list java

Remove invalid:
sudo update-alternatives --remove java /usr/lib/jvm/java-8

//======================================================================

To save core dump (can be run as user(non root) ):
ulimit -c unlimited


Куда пишется файл core записано в файле:
/proc/sys/kernel/core_pattern

Например:
/opt/coredumps/core.%e.%p.%t
|/usr/share/apport/apport %p %s %c %P


gdb core dump:

gdb <executable> <core-file> 
or 
gdb <executable> -c <core-file> 
or
gdb <executable>
...
(gdb) core <core-file>


start program with arguments:
gdb --args ./program arg1 arg2 arg3

break on first throw:
gdb$ catch throw

//======================================================================

set compilers for cmake: 
2072  export CCC_ANALYZER_CPLUSPLUS=1
2073  export CC=clang-3.6
2074  export CXX=clang++-3.6

//======================================================================

grep search:
grep -in "some word" ./restoretimelink.cc
grep -in "return" ./*.cc ./*.h

find . -name "*link*"

find . -type f -iname "*.cc" -o -iname "*.cpp" -o -iname "*.c" -o -iname "*.h" -o -iname "*.hh"  | xargs grep -in --color=auto "link"

findcode() {
    if [ -z "$1" ]
    then
        echo "USAGE: findcode search_pattern show_lines"
    fi
    if [ -z "$2" ]
    then
        find . -type f -iname "*.c" -o -iname "*.cc" -o -iname "*.cpp" -o -iname "*.h" -o -iname "*.hh" -o -iname "*.hpp" \
                    -o -iname "*.py" -o -iname "*.pl" -o -iname "Makefile" -o -iname "*.CMakeLists.txt" -o -iname "*.sh" | xargs grep -in --color=auto $1        
    else
        find . -type f -iname "*.c" -o -iname "*.cc" -o -iname "*.cpp" -o -iname "*.h" -o -iname "*.hh" -o -iname "*.hpp" \
                    -o -iname "*.py" -o -iname "*.pl" -o -iname "Makefile" -o -iname "*.CMakeLists.txt" -o -iname "*.sh" | xargs grep -in --color=auto -C $2 $1                    
    fi
}

findc() {
    if [ -z "$1" ]
    then
        echo "USAGE: findc search_pattern show_lines"
    fi
    if [ -z "$2" ]
    then
      find . -type f -iname "*.c" -o -iname "*.cc" -o -iname "*.cpp" -o -iname "*.h" -o -iname "*.hh" -o -iname "*.hpp"  | xargs grep -in --color=auto $1
    else
      find . -type f -iname "*.c" -o -iname "*.cc" -o -iname "*.cpp" -o -iname "*.h" -o -iname "*.hh" -o -iname "*.hpp"  | xargs grep -in --color=auto -C $2 $1
    fi    
}


#--include - case sensative
grep -rin --include "*.c" --include "*.cc" --include "*.cpp" --include "*.h" --include "*.hh" --include "*.hpp" $1
grep -rin --include "*.c" --include "*.cc" --include "*.cpp" --include "*.h" --include "*.hh" --include "*.hpp" \
          --include "*.py" --include "*.pl" --include "Makefile" --include "CMakeLists.txt" $1

//======================================================================
Locate:

locate file_name

Update locate database:
sudo updatedb

Database:
/var/lib/mlocate/mlocate.db
Config:
/etc/updatedb.conf

//======================================================================

sfte
nefte

//======================================================================

qt creator qtcreator
Go to goto defintion: F2 key

//======================================================================

Remove spaces at end of lines:
sed -i "s/[[:blank:]]*$//" file_name

//======================================================================

set default editor mcedit:
sudo update-alternatives --config editor

//======================================================================

Gnome terminal with 256 colors:
export TERM="xterm-256color"

//======================================================================
ctags
generate tags for mcedit:
ctags -e -R

use tags in mcedit:
cursor at end of word, Alt+Enter

human readable tags:
ctags -R -x > ./out.txt

list all classes:
ctags -R -x --languages=C++ --C++-kinds=c

//======================================================================

grep stderr:

./some_command   2>&1 >/dev/null | grep 'ERROR'

or this (works only in bash):
./some_command |& grep 'ERROR'

//======================================================================

use callgrind: 
valgrind --tool=callgrind ./program_name --prog-args

get text output:
callgrind_annotate ./callgrind.out.1515

output also callers and called functions:
callgrind_annotate --tree=both ./callgrind.out.1515

Only profile selected function and functions called from it:
valgrind --tool=callgrind "--toggle-collect=ClassName::FunctionName*" ./program_name arg1 arg2

--toggle-collect can be given multiple times to specify different functions of interest.

//======================================================================

Open cmake project in eclipse:

cd <project_dir>
cmake -G "Eclipse CDT4 - Unix Makefiles" ./

//======================================================================

format flash ntfs
sudo mkfs.ntfs --fast -L label /dev/sdf1

create partition:
fdisk
p - print partitions
n - create partition
d - delete partition
w - write changes to disk

//======================================================================

get motherboard info (non root):

cat /sys/devices/virtual/dmi/id/board_{vendor,name,version}

//======================================================================

show running threads:

ps -eL -o user,pid,psr,comm,args
htop

//======================================================================

htop
space - select process
l - show opened files of process

//======================================================================

restart network:

/etc/init.d/networking restart

ubuntu:
ifup eth0
ifdown eth0

//======================================================================
set eth0 use dhcp:

file:
/etc/network/interfaces

allow-hotplug eth0
iface eth0 inet dhcp


set eth0 static ip:

auto eth0
iface eth0 inet static
    address 192.168.1.148
    netmask 255.255.255.0
    gateway 192.168.1.1    
    
//======================================================================

install docker ubuntu 14.04
apt-key adv --keyserver hkp://p80.pool.sks-keyservers.net:80 --recv-keys 58118E89F3A912897C070ADBF76221572C52609D

to file /etc/apt/sources.list.d/docker.list write:
deb https://apt.dockerproject.org/repo ubuntu-trusty main

apt-get install linux-image-extra-$(uname -r) linux-image-extra-virtual

apt-get update

apt-get install docker-engine

groupadd docker
usermod -aG docker $USER
newgrp docker

to file /etc/default/docker add (not required, only when dns does not work):
DOCKER_OPTS="--dns 172.17.32.3 --bip=192.168.1.5/24"

service docker start

docker run hello-world

-------

move image to another host:
docker save -o <save image to path> <image name>

copy to another computer, then:

docker load -i <path to image tar file>

git for docker:
https://ryanfb.github.io/etc/2015/07/29/git_strategies_for_docker.html

volumes:
http://container42.com/2013/12/16/persistent-volumes-with-docker-container-as-volume-pattern/
https://docs.docker.com/engine/tutorials/dockervolumes/

//======================================================================

perf:
perf record -F 99 -g ./some_program
perf report


//======================================================================

run test whose name matches regex:
ctest -V -R ".*test-name.*"

//======================================================================

convert to base 64
echo -n "admin:123" | base64
from base 64
echo "YWRtaW46MTIz" | base64 --decode

//======================================================================

uwsgi
uwsgi --http-socket 127.0.0.1:7070 --wsgi-file ./gallery.wsgi
sudo pip install uwsgi

//======================================================================