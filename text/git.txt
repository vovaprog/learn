
Create branch:
git branch some_name
git checkout some_name

Create branch:
git checkout -b some_name

Create remote branch:
git push -u origin fix1
after it "git pull" will automatically work.

Rebase:
rebase ветки feature. Переключиться на ветку feature, потом:
git rebase master

Load all changes from remote:
git fetch

Merge:
git checkout master
git merge fix1
    

git config --global user.name "John Doe"
git config --global user.email johndoe@example.com

git config --global core.editor mcedit

git config --global merge.tool meld    (kdiff3)

Remove last commit. HEAD~Number - remove Number of commits: 
git reset --hard HEAD~1

the following command will check out out the grandparent of the current commit:
git checkout HEAD~2


Create new commit with undo changes from last commit
git revert HEAD

Create new commit with undo changes from last two commits
git revert HEAD~2 


git reset - changes commit history
git revert - does not change commit history. Should be used on public repos.

git revert should be used to undo changes on a public branch, and git reset should be reserved for undoing changes on a private branch.
You can also think of git revert as a tool for undoing committed changes, while git reset HEAD is for undoing uncommitted changes.

change file foo.py in working folder to commit HEAD~2:
git checkout HEAD~2 foo.py

git reset	   Commit-level   Discard commits in a private branch or throw away uncommited changes
git reset	   File-level     Unstage a file
git checkout   Commit-level   Switch between branches or inspect old snapshots
git checkout   File-level     Discard changes in the working directory
git revert     Commit-level   Undo commits in a public branch
git revert     File-level     (N/A)


Show log tree:
git log --graph --oneline --all
git log --graph --pretty=oneline --abbrev-commit

git log --graph --abbrev-commit --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold green)(%ar)%C(reset) %C(white)%s%C(reset) %C(dim white)- %an%C(reset)%C(bold yellow)%d%C(reset)' --all


start http browser of repository:
git instaweb
git instaweb [--start] [--stop] [--restart]

Если поставить ^ в конце ссылки, для Git'а это будет означать родителя этого коммита. HEAD^, что означает "родитель HEAD": 
git show HEAD^
Вы также можете указать некоторое число после ^. Например, d921970^2 означает "второй родитель коммита d921970". 
Такой синтаксис полезен только для коммитов-слияний, которые имеют больше, чем одного родителя. 
Первый родитель — это ветка, на которой вы находились во время слияния, а второй — коммит на ветке, которая была слита

Другое основное обозначение для указания на предков — это ~. Это тоже ссылка на первого родителя, поэтому HEAD~ и HEAD^ эквивалентны.
Различия становятся очевидными, только когда вы указываете число. 
HEAD~2 означает первого родителя первого родителя HEAD или прародителя — это переход по первым родителям указанное количество раз.

HEAD~3 == HEAD^^^
HEAD~3^2 - второй родитель для третьего предка.


git config --global alias.hist "log --graph --oneline --all"
git config --global alias.hist2 "log --graph --abbrev-commit --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold green)(%ar)%C(reset) %C(white)%s%C(reset) %C(dim white)- %an%C(reset)%C(bold yellow)%d%C(reset)' --all"


Commit amend:

$ git commit -m 'initial commit'
$ git add forgotten_file
$ git commit --amend

You end up with a single commit – the second commit replaces the results of the first.




detached HEAD state

